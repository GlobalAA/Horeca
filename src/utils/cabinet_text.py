from aiogram.types import CallbackQuery, InlineKeyboardMarkup, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from callbacks.types import DeleteVocation, ExperienceVacancyData, ResetData
from keyboards.back_keyboard import append_back_button
from models.enums import PriceOptionEnum, UserRoleEnum
from models.models import ExperienceVacancy, Subscription, User, Vacancies


def format_subscriptions(subscriptions: list [Subscription]):
	if not subscriptions:
		return "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫üçÇ"
	
	text_map = {
		PriceOptionEnum.FREE: "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π",
		PriceOptionEnum.VIP: "VIP",
		PriceOptionEnum.RESUME_SUB: "–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É —Ä–µ–∑—é–º–µ",
		PriceOptionEnum.VIEW_COMMENTS: "–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏ –∑ –º–∏–Ω—É–ª–∏–º–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º–∏"
	}

	result_lines = ["üçÄ <b>–ü—ñ–¥–ø–∏—Å–∫–∏:</b>"]
	for sub in subscriptions:
		expired = sub.time_expired.strftime("%d.%m.%Y") if sub.time_expired else "‚àû"
		result_lines.append(f"‚Ä¢ {text_map[sub.status]} ‚Äî –¥–æ <b>{expired}</b>")
	return '\n'.join(result_lines)

def get_cabinet_text(callback: CallbackQuery | Message, user: User, len_cv: int, len_published_cv: int, len_vacancies: int, subscriptions: list[Subscription]):
	return f"""üìá –Ü–º'—è: {callback.from_user.full_name}
üîë ID: {callback.from_user.id}
üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance} –≥—Ä–Ω
üìÖ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {user.created_at.strftime("%d.%m.%Y")}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
{format_subscriptions(subscriptions)}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üìù –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ä–µ–∑—é–º–µ: {len_cv} —à—Ç.
üìå –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö —Ä–µ–∑—é–º–µ: {len_published_cv} —à—Ç
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üì∞ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π: {len_vacancies} —à—Ç
"""

def send_vocation(full_name: str, vocations: list[Vacancies | ExperienceVacancy], index: int, total: int, view_all: bool = False) -> tuple[str, InlineKeyboardMarkup]:
	vocation_model = vocations[index]
	phone_number = vocation_model.phone_number
	telegram_link = vocation_model.telegram_link

	communication_text = phone_number if phone_number else telegram_link

	vocation = vocation_model.vocation

	if (subvocation := vocation_model.subvocation) != None and vocation:
		vocation = subvocation
	else:
		vocation = vocation.value


	text = f"""–ó–∞–∫–ª–∞–¥ <i>{vocation_model.name}</i>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üìç –ú—ñ—Å—Ç–æ: {vocation_model.city.value}
üè† –†–∞–π–æ–Ω: {vocation_model.district}
‚ôü –®—É–∫–∞—î: {vocation}
‚è±Ô∏è –ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏: {vocation_model.work_schedule}
üí∞ –ó–∞—Ä–æ–±—ñ—Ç–Ω–∞ –ø–ª–∞—Ç–∞: {int(vocation_model.salary)} | –°—Ç–∞–≤–∫–∞: {vocation_model.rate}
üìÜ –í–∏–¥–∞—î—Ç—å—Å—è –∑/–ø: {vocation_model.issuance_salary}
üë®‚Äçü¶≥ –í—ñ–∫: –¥–æ {vocation_model.age_group}
üì∞ –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {vocation_model.additional_information if isinstance(vocation_model, Vacancies) and vocation_model.additional_information else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
üí° –î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏: {vocation_model.experience.value if isinstance(vocation_model, Vacancies) else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üìû –î–ª—è –∑–≤'—è–∑–∫—É: {communication_text} | {full_name}
üì© –°–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É: {vocation_model.communications.value}
"""

	if not view_all and isinstance(vocation_model, Vacancies):
		text += f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüìÜ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞ –¥–æ: {vocation_model.time_expired.strftime('%d.%m.%Y')}"
	builder = InlineKeyboardBuilder()

	if not view_all:
		builder.button(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è —É –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="back_to_profile")

	if index > 0:
		builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"slider_prev_vacancies:{view_all}")
	if index < total - 1:
		builder.button(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"slider_next_vacancies:{view_all}")

	if not view_all and isinstance(vocation_model, Vacancies):
		builder.button(text="üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –¥–∞–Ω—ñ –∑–∞–Ω–æ–≤–æ", callback_data=ResetData(type=UserRoleEnum.EMPLOYER, for_update=True))
		builder.button(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=DeleteVocation(vocation_id=vocation_model.id))
		builder.button(text="–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ç–µ—Ä–º—ñ–Ω –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó", callback_data="extend_publication")

	if view_all:
		builder.button(text="üü¢ –û–±—Ä–∞—Ç–∏", callback_data=ExperienceVacancyData(vacancy_id=vocation_model.id))
		
		if index > 0 and index < total - 1:
			builder.adjust(2, 1)
		else:
			builder.adjust(1, 1)

		with_back = append_back_button(builder.as_markup(), "choosing_experience_type")

		return text, with_back
	else:
		if index > 0 and index < total - 1:
			builder.adjust(1, 2, 1)
		else:
			builder.adjust(1, 1, 1)
		return text, builder.as_markup()
	
async def comment_slider_button(index: int, total: int) -> InlineKeyboardMarkup:
	builder = InlineKeyboardBuilder()

	if index > 0:
		builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"slider_prev_comment")
	if index < total - 1:
		builder.button(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"slider_next_comment")

	builder.button(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è —É –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="back_to_profile")

	if index > 0 and index < total - 1:
		builder.adjust(2, 1)
	else:
		builder.adjust(1, 1)

	return builder.as_markup()
