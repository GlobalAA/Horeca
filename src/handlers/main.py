from io import BytesIO

from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile, Message
from aiogram.utils.chat_action import ChatActionSender
from fpdf import FPDF

from constants import bot
from keyboards import start_keyboard
from keyboards.cabinet_keyboards import cabinet_keyboard
from models.models import (PaymentHistory, PriceOptionEnum, Subscription, User,
                           UserRoleEnum)
from utils.cabinet_text import get_cabinet_text

router = Router()

@router.message(CommandStart())
async def start_message(message: Message, state: FSMContext):
	await message.answer(f"–í—ñ—Ç–∞—î–º–æ, {message.from_user.first_name}!\n–ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –¥–∞–Ω–æ–≥–æ –±–æ—Ç—É –í–∏ –º–æ–∂–µ—Ç–µ —à–≤–∏–¥–∫–æ –π –∑—Ä—É—á–Ω–æ –∑–Ω–∞–π—Ç–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –¥–ª—è —Å–≤–æ–≥–æ –∑–∞–∫–ª–∞–¥—É –∞–±–æ –±–∞–∂–∞–Ω—É —Ä–æ–±–æ—Ç—É.", reply_markup=start_keyboard())

	username = message.from_user.username
	full_name = message.from_user.full_name

	if not username:
		username = "–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"
	
	user, _ = await User.get_or_create(
		user_id=message.from_user.id,
		username=username,
		full_name=full_name,
		defaults={
			"role": UserRoleEnum.USER,
			"referrer_id": message.from_user.id,
			"last_msg_id": 0,
			"date_sub": None
		}
	)

	await Subscription.get_or_create(
		status=PriceOptionEnum.FREE,
		user=user
	)

@router.message(Command("cabinet"))
async def cabinet(message: Message):
	user = await User.get_or_none(user_id=message.from_user.id).prefetch_related("cvs", "vacancies", "subscriptions", "history")

	if not user:
		return await message.answer("üî¥ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
	
	len_cv = len(user.cvs) #type: ignore
	len_vacancies = len(user.vacancies) #type: ignore

	len_published_cv = len([cv for cv in user.cvs if cv.published]) #type: ignore

	subscriptions: list[Subscription] = [sub for sub in user.subscriptions] #type: ignore
	
	text = get_cabinet_text(message, user, len_cv, len_published_cv, len_vacancies, subscriptions)

	with_history = await user.history.all().count() > 0 #type: ignore

	async with ChatActionSender.upload_document(bot=bot, chat_id=message.chat.id):
		if with_history:
			pdf = FPDF()
			pdf.add_page()
			pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
			pdf.set_font("DejaVu", size=12)

			history: list[PaymentHistory] = await user.history.all() #type: ignore

			for h in history:
				text_pdf = (
					f"–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä: {h.invoice_id}\n"
					f"–°—Ç–≤–æ—Ä–µ–Ω–æ: {h.created_at.strftime('%d.%m.%Y %H:%M')}\n"
					f"–¶—ñ–Ω–∞: {h.amount}–≥—Ä–Ω\n"
					f"–¢–æ–≤–∞—Ä: {h.payment_type.value}\n\n"
				)

				pdf.multi_cell(0, 10, text_pdf, align="L")
			
			pdf_bytes = pdf.output(dest='S')
			if isinstance(pdf_bytes, bytearray):
				pdf_bytes = bytes(pdf_bytes)

			pdf_buffer = BytesIO(pdf_bytes)
			pdf_buffer.seek(0)

			input_file = BufferedInputFile(pdf_buffer.getvalue(), filename="payment_history.pdf")

			return await message.answer_document(
				document=input_file,
				caption=text,
				reply_markup=cabinet_keyboard()
			)
	
	await message.answer(text, reply_markup=cabinet_keyboard())

@router.message(Command("info"))
async def info(message: Message):
	description = (
    "–ë–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É —Ä–æ–±–æ—Ç–∏ —Ç–∞ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤.\n"
    "–û–±–∏—Ä–∞–π—Ç–µ, –∫–æ–≥–æ —à—É–∫–∞—î—Ç–µ ‚Äî –≤–∞–∫–∞–Ω—Å—ñ—é —á–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞.\n\n"
    "üü¢ /start ‚Äî —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫\n"
    "üë§ /cabinet ‚Äî –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç\n"
    "üì© –©–æ–≥–æ–¥–∏–Ω–∏ –æ—Ç—Ä–∏–º—É–π—Ç–µ –Ω–æ–≤—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –∞–±–æ —Ä–µ–∑—é–º–µ!\n\n"
    "üí∞ –¢–∞—Ä–∏—Ñ–∏:\n"
    "‚Ä¢ 1 –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞ 1 –¥–µ–Ω—å ‚Äî 100 –≥—Ä–Ω\n"
    "‚Ä¢ 1 –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å ‚Äî 300 –≥—Ä–Ω\n"
    "‚Ä¢ VIP-–ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º—ñ—Å—è—Ü—å (10 –æ–≥–æ–ª–æ—à–µ–Ω—å —â–æ—Ç–∏–∂–Ω—è) ‚Äî 2000 –≥—Ä–Ω\n"
    "‚Ä¢ –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ –Ω–∞ –º—ñ—Å—è—Ü—å ‚Äî 1000 –≥—Ä–Ω\n"
    "‚Ä¢ –î–æ—Å—Ç—É–ø –¥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –ø—Ä–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ ‚Äî 1000 –≥—Ä–Ω/–º—ñ—Å\n\n"
		"üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: @german_mu"
	)
	
	await message.answer(description)