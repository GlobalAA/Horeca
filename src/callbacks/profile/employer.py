from datetime import datetime, timedelta
from typing import cast

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import (CallbackQuery, InlineKeyboardMarkup, Message,
                           PhotoSize)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from callbacks.states import VocationState
from callbacks.types import (AgeGroupData, BackData, CityData,
                             CommunicationMethodData, DistrictData,
                             ExperienceData, FinalDataVocation, ImageData,
                             RateTypeData, ResetData, SubvocationData,
                             VacancyNameSkip, VocationData)
from keyboards import (age_group_keyboard, append_back_button, city_keyboard,
                       communication_method_keyboard, district_keyboard,
                       experience_keyboard, last_name_keyboard,
                       rate_type_keyboard, reset_keyboard,
                       subvocation_keyboard, vocation_keyboard,
                       vocation_keyboard_price)
from models.enums import (CommunicationMethodEnum, PriceOptionEnum,
                          RateTypeEnum, UserRoleEnum, VocationEnum)
from models.models import User, Vacancies
from utils import validate_phone_number
from utils.state import push_state
from utils.validate import percent_validate, validate_telegram_username

router_employer = Router()

@router_employer.callback_query(ResetData.filter(F.type == UserRoleEnum.EMPLOYER))
async def reset_handler(callback: CallbackQuery, state: FSMContext):
	await state.clear()
	
	message = cast(Message, callback.message)

	try:
		await message.edit_text("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É")
	except TelegramBadRequest:
		await message.answer("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É")
		
	await message.answer('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ', reply_markup=city_keyboard(callback.from_user.id))
	await callback.answer()
	await push_state(state, VocationState.choosing_city)

@router_employer.callback_query(BackData.filter(F.type == UserRoleEnum.EMPLOYER), BackData.filter(F.edit == False))
async def back_handler(callback: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	history: list[str] = data.get("history", [])

	if len(history) <= 1:
		print(history)
		return await callback.answer("üî¥ –ù–µ–º–∞—î –∫—É–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—å")

	history.pop()
	previous_state_str = history.pop()
	state_name = previous_state_str.split(':')[-1]

	target_state = getattr(VocationState, state_name, None)
	if not target_state:
		print(target_state, state_name)
		return await callback.answer("üî¥ –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥")

	await state.update_data(history=history)
	await push_state(state, target_state)

	text_map = {
    "choosing_city": "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ",
    "choosing_district": "–û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω",
    "choosing_vocation": "–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ñ–µ—Ä—É –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ",
    "choosing_subvocation": "–í–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–≤–∞–∫–∞–Ω—Å—ñ—é",
    "choosing_name": "–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–∫–ª–∞–¥—É\n\n–ü–∏—à—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —â–æ–± –≤ –ø–æ–¥–∞–ª—å—à–æ–º—É –æ–±–ª–µ–≥—à–∏—Ç–∏ –ø–æ—à—É–∫",
    "choosing_address": "–í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∑–∞–∫–ª–∞–¥—É",
    "choosing_work_schedule": "–í–∫–∞–∂—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏\n\n–ü—Ä–∏–∫–ª–∞–¥: –∑ 11:00 –¥–æ 22:00 —ñ 2/2 –∞–±–æ 2/4",
    "choosing_age_group": "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–∫–æ–≤—É –≥—Ä—É–ø—É",
    "choosing_experience": "–í–∫–∞–∂—ñ—Ç—å –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏",
    "choosing_salary": "–í–∫–∞–∂—ñ—Ç—å –∑–∞—Ä–æ–±—ñ—Ç–Ω—É –ø–ª–∞—Ç—É",
    "choosing_rate_type": "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –≤ –¥–µ–Ω—å",
    "choosing_rate": "–í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞–≤–∫—É",
    "choosing_issuance_salary": "–í–∫–∞–∂—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏ –≤–∏–¥–∞—á—ñ –∑–∞—Ä–æ–±—ñ—Ç–Ω–æ—ó –ø–ª–∞—Ç–∏\n\n–ü—Ä–∏–∫–ª–∞–¥: —Ä–∞–∑ –≤ –º—ñ—Å—è—Ü—å, —Ä–∞–∑ –≤ –¥–µ–Ω—å",
    "choosing_communications": "–í–∏–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó",
    "choosing_phone_number": "–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
    "choosing_telegram_link": "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º, –∞–±–æ —Ç–µ–≥",
    "choosing_photo_id": "–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ –≤–∞–∫–∞–Ω—Å—ñ—ó? –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É",
}

	keyboard_map = {
    "choosing_city": lambda uid, _: city_keyboard(uid),
    "choosing_district": lambda uid, d: district_keyboard(uid, d["city"]),
    "choosing_vocation": lambda uid, _: vocation_keyboard(uid),
    "choosing_subvocation": lambda uid, d: subvocation_keyboard(uid, d["vocation"]),
    "choosing_age_group": lambda uid, _: age_group_keyboard(uid),
    "choosing_experience": lambda uid, _: experience_keyboard(uid),
    "choosing_rate_type": lambda uid, _: rate_type_keyboard(uid),
    "choosing_communications": lambda uid, _: communication_method_keyboard(uid),
    "choosing_name": lambda *_: None,
    "choosing_address": lambda *_: None,
    "choosing_work_schedule": lambda *_: None,
    "choosing_salary": lambda *_: None,
    "choosing_rate": lambda uid, _: None,
    "choosing_issuance_salary": lambda *_: None,
    "choosing_phone_number": lambda *_: None,
    "choosing_telegram_link": lambda *_: None,
    "choosing_photo_id": lambda uid, _: None,
	}

	text = text_map.get(state_name, "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è")
	uid = callback.from_user.id
	message = cast(Message, callback.message)

	if state_name in keyboard_map:
		keyboard = keyboard_map[state_name](uid, data)
		await message.edit_text(
			text,
			reply_markup=append_back_button(keyboard, state_name, UserRoleEnum.EMPLOYER)
		)
		return await callback.answer()

	await message.edit_text(text)
	await callback.answer()


@router_employer.callback_query(VocationState.choosing_city, CityData.filter())
async def choosing_city(callback: CallbackQuery, callback_data: CityData, state: FSMContext):
	await state.update_data(city=callback_data.city)

	message = cast(Message, callback.message)

	await message.edit_text(
		"–û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω",
		reply_markup=append_back_button(district_keyboard(callback.from_user.id, callback_data.city), "choosing_city", UserRoleEnum.EMPLOYER)
	)

	await callback.answer()
	await push_state(state, VocationState.choosing_district)

@router_employer.callback_query(VocationState.choosing_district, DistrictData.filter())
async def choosing_district_callback(callback: CallbackQuery, callback_data: DistrictData, state: FSMContext):
	await state.update_data(district=callback_data.district)

	message = cast(Message, callback.message)

	await message.edit_text(
		"–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ñ–µ—Ä—É –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ",
		reply_markup=append_back_button(vocation_keyboard(callback.from_user.id), "choosing_district", UserRoleEnum.EMPLOYER)
	)

	await callback.answer()
	await push_state(state, VocationState.choosing_vocation)

@router_employer.callback_query(VocationState.choosing_vocation, VocationData.filter())
async def choosing_vocation_callback(callback: CallbackQuery, callback_data: VocationData, state: FSMContext):
	await state.update_data(vocation=callback_data.vocation)

	message = cast(Message, callback.message)
	
	if callback_data.vocation in (VocationEnum.HOSTESS, VocationEnum.CASHIER, VocationEnum.PURCHASER, VocationEnum.CLEANER, VocationEnum.SECURITY, VocationEnum.ACCOUNTANT, VocationEnum.HOOKAH):
		await message.answer("–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–∫–ª–∞–¥—É\n\n–ü–∏—à—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —â–æ–± –≤ –ø–æ–¥–∞–ª—å—à–æ–º—É –æ–±–ª–µ–≥—à–∏—Ç–∏ –ø–æ—à—É–∫", reply_markup=append_back_button(await last_name_keyboard(user_id=callback.from_user.id), "choosing_name", UserRoleEnum.EMPLOYER))

		await callback.answer()
		return await push_state(state, VocationState.choosing_name)

	await message.edit_text(
		"–í–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–≤–∞–∫–∞–Ω—Å—ñ—é",
		reply_markup=append_back_button(subvocation_keyboard(callback.from_user.id, callback_data.vocation), "choosing_vocation", UserRoleEnum.EMPLOYER)
	)

	await callback.answer()
	await push_state(state, VocationState.choosing_subvocation)

@router_employer.callback_query(VocationState.choosing_subvocation, SubvocationData.filter())
async def choosing_subvocation_callback(callback: CallbackQuery, callback_data: SubvocationData, state: FSMContext):
	await state.update_data(subvocation=callback_data.subvocation)

	message = cast(Message, callback.message)
	
	await message.edit_text("–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–∫–ª–∞–¥—É\n\n–ü–∏—à—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —â–æ–± –≤ –ø–æ–¥–∞–ª—å—à–æ–º—É –æ–±–ª–µ–≥—à–∏—Ç–∏ –ø–æ—à—É–∫", reply_markup=append_back_button(await last_name_keyboard(user_id=callback.from_user.id), "choosing_subvocation", UserRoleEnum.EMPLOYER)) 

	await callback.answer()
	await push_state(state, VocationState.choosing_name)

@router_employer.message(VocationState.choosing_name)
async def choosing_name(message: Message, state: FSMContext):
	await state.update_data(name=message.text)

	await message.answer("–í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∑–∞–∫–ª–∞–¥—É", reply_markup=append_back_button(None, "choosing_name", UserRoleEnum.EMPLOYER))
	await push_state(state, VocationState.choosing_address)

@router_employer.callback_query(VocationState.choosing_name, VacancyNameSkip.filter())
async def choosing_name_callback(callback: CallbackQuery, callback_data: VacancyNameSkip, state: FSMContext):
	message = cast(Message, callback.message)
	await state.update_data(name=callback_data.last_name)

	await message.edit_text(text="–í–∏–±—Ä–∞–Ω–æ –æ—Å—Ç–∞–Ω–Ω—é –Ω–∞–∑–≤—É –∑–∞–∫–ª–∞–¥—É")

	await message.answer("–í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∑–∞–∫–ª–∞–¥—É", reply_markup=append_back_button(None, "choosing_name", UserRoleEnum.EMPLOYER))
	await push_state(state, VocationState.choosing_address)

@router_employer.message(VocationState.choosing_address)
async def choosing_address(message: Message, state: FSMContext):
	await state.update_data(address=message.text)
	
	await message.answer("–í–∫–∞–∂—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏\n\n–ü—Ä–∏–∫–ª–∞–¥: –∑ 11:00 –¥–æ 22:00 —ñ 2/2 –∞–±–æ 2/4", reply_markup=append_back_button(None, "choosing_address", UserRoleEnum.EMPLOYER))  

	await push_state(state, VocationState.choosing_work_schedule)

@router_employer.message(VocationState.choosing_work_schedule)
async def choosing_work_schedule(message: Message, state: FSMContext):
	await state.update_data(work_schedule=message.text)

	await message.answer(
		"–û–±–µ—Ä—ñ—Ç—å –≤—ñ–∫–æ–≤—É –≥—Ä—É–ø—É",
		reply_markup=append_back_button(age_group_keyboard(message.from_user.id), "choosing_work_schedule", UserRoleEnum.EMPLOYER)
	)  

	await push_state(state, VocationState.choosing_age_group)


@router_employer.callback_query(VocationState.choosing_age_group, AgeGroupData.filter())
async def choosing_age_group_callback(callback: CallbackQuery, callback_data: AgeGroupData, state: FSMContext):
	await state.update_data(age_group=callback_data.age_group)

	message = cast(Message, callback.message)
	
	await message.edit_text(
		"–í–∫–∞–∂—ñ—Ç—å –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏",
		reply_markup=append_back_button(experience_keyboard(callback.from_user.id), "choosing_age_group", UserRoleEnum.EMPLOYER)
	)

	await callback.answer()
	await push_state(state, VocationState.choosing_experience)

@router_employer.callback_query(VocationState.choosing_experience, ExperienceData.filter())
async def choosing_experience(callback: CallbackQuery, callback_data: ExperienceData, state: FSMContext):
	await state.update_data(experience=callback_data.experience)

	message = cast(Message, callback.message)

	await message.edit_text("–í–∫–∞–∂—ñ—Ç—å –∑–∞—Ä–æ–±—ñ—Ç–Ω—É –ø–ª–∞—Ç—É", reply_markup=append_back_button(None, "choosing_experience", UserRoleEnum.EMPLOYER))

	await callback.answer()
	await push_state(state, VocationState.choosing_salary)

@router_employer.message(VocationState.choosing_salary)
async def choosing_salary(message: Message, state: FSMContext):
	salary = message.text 

	try:
		salary = int(salary) #type: ignore
	except ValueError:
		return await message.answer("üî¥ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –∑–∞—Ä–æ–±—ñ—Ç–Ω–æ—ó –ø–ª–∞—Ç–∏")

	await state.update_data(salary=salary)

	await message.answer(
		"–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –≤ –¥–µ–Ω—å", 
		reply_markup=append_back_button(rate_type_keyboard(message.from_user.id), "choosing_salary", UserRoleEnum.EMPLOYER)
	)

	await push_state(state, VocationState.choosing_rate_type)

@router_employer.callback_query(VocationState.choosing_rate_type, RateTypeData.filter())
async def choosing_rate_type(callback: CallbackQuery, callback_data: RateTypeData, state: FSMContext):
	await state.update_data(rate_type=callback_data.rate_type)

	await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞–≤–∫—É", reply_markup=append_back_button(None, "choosing_rate_type", UserRoleEnum.EMPLOYER))

	await callback.answer()
	await push_state(state, VocationState.choosing_rate)

@router_employer.message(VocationState.choosing_rate)
async def choosing_rate(message: Message, state: FSMContext):
	data = await state.get_data()
	rate_type: RateTypeEnum = data['rate_type']

	if rate_type == RateTypeEnum.PRECENT and not percent_validate(str(message.text)):
		return await message.answer("üî¥ –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏.\n\n–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: 100%, 50%, 10%")
	if rate_type == RateTypeEnum.PRECENT_RATE and not percent_validate(str(message.text), percent_with_rate=True):
		return await message.answer("üî¥ –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏ + –≤—ñ–¥—Å–æ—Ç–æ–∫\n\n–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: <i>1000 10%</i>, <i>10 15%</i> ")

	await state.update_data(rate=message.text)

	await message.answer("–í–∫–∞–∂—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏ –≤–∏–¥–∞—á—ñ –∑–∞—Ä–æ–±—ñ—Ç–Ω–æ—ó –ø–ª–∞—Ç–∏\n\n–ü—Ä–∏–∫–ª–∞–¥: —Ä–∞–∑ –≤ –º—ñ—Å—è—Ü—å, —Ä–∞–∑ –≤ –¥–µ–Ω—å", reply_markup=append_back_button(None, "choosing_rate", UserRoleEnum.EMPLOYER))

	await push_state(state, VocationState.choosing_issuance_salary)

@router_employer.message(VocationState.choosing_issuance_salary)
async def choosing_issuance_salary(message: Message, state: FSMContext):
	issuance_salary = message.text

	await state.update_data(issuance_salary=issuance_salary)

	await message.answer(
		"–í–∏–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó", 
		reply_markup=append_back_button(communication_method_keyboard(message.from_user.id), "choosing_issuance_salary", UserRoleEnum.EMPLOYER)
	)

	await push_state(state, VocationState.choosing_communications)

@router_employer.callback_query(VocationState.choosing_communications, CommunicationMethodData.filter())
async def choosing_communication_method(callback: CallbackQuery, callback_data: CommunicationMethodData, state: FSMContext):
	await state.update_data(communication_data=callback_data.method)

	message = cast(Message, callback.message)
	
	await callback.answer()

	text = "–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É" if callback_data.method == CommunicationMethodEnum.PhoneCommunication else "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º, –∞–±–æ —Ç–µ–≥"

	await message.edit_text(text, reply_markup=append_back_button(None, "choosing_communications", UserRoleEnum.EMPLOYER))


	await push_state(state, VocationState.choosing_phone_number if callback_data.method == CommunicationMethodEnum.PhoneCommunication else VocationState.choosing_telegram_link)

@router_employer.message(VocationState.choosing_phone_number)
@router_employer.message(VocationState.choosing_telegram_link)
async def choosing_phone_number(message: Message, state: FSMContext):
	text = message.text

	current_state = await state.get_state()

	is_choosing_phone_number = current_state == VocationState.choosing_phone_number

	if isinstance(text, str):
		if not validate_phone_number(text) and is_choosing_phone_number:
			return await message.answer("üî¥ –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n\n–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: +380631234567 0631234567 0 67 123 45 67 +38-067-123-45-67")
		if not validate_telegram_username(text) and not is_choosing_phone_number:
			return await message.answer("üî¥ –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ–≥—Ä–∞–º username\n\n–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: @user_123 t.me/username https://t.me/user123", disable_web_page_preview=True)
	else:
		return await message.answer("üî¥ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ —Ç–µ–∫—Å—Ç")

	if is_choosing_phone_number:
		await state.update_data(phone_number=text)
	else:
		await state.update_data(telegram_link=text)

	builder = InlineKeyboardBuilder()

	builder.button(
		text="‚è´ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
		callback_data=ImageData(user_id=message.from_user.id, with_image=False, photo_id=None)
	)

	await message.answer(
		"–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ –≤–∞–∫–∞–Ω—Å—ñ—ó? –ù–∞–¥—ñ—à–ª—ñ—Ç—å",
		reply_markup=append_back_button(builder.as_markup(), "choosing_phone_number" if is_choosing_phone_number else "choosing_telegram_link", UserRoleEnum.EMPLOYER)
	)

	await push_state(state, VocationState.choosing_photo_id)

@router_employer.message(VocationState.choosing_photo_id, F.photo, ~ImageData.filter())
async def choosing_photo_id(message: Message, state: FSMContext):
	photo = message.photo[-1] if message.photo else None

	if not photo:
		return await message.answer("üî¥ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

	await data_full_get(message, state, message.from_user.id, photo)

@router_employer.callback_query(VocationState.choosing_photo_id, ImageData.filter())
async def choosing_photo_id_callback(callback: CallbackQuery, callback_data: ImageData, state: FSMContext):
	with_img = callback_data.with_image

	if with_img == True:
		return await callback.message.answer("üî¥ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")

	message = cast(Message, callback.message)
	
	await callback.answer()
	await data_full_get(message, state, full_name=callback.from_user.full_name, user_id=callback.from_user.id)

async def data_full_get(message: Message, state: FSMContext, user_id: int, photo: PhotoSize | None = None, full_name: str | None = None):
	data = await state.get_data()

	vocation = data['vocation']

	if (subvocation := data.get('subvocation', None)) != None and vocation:
		vocation = subvocation
	else:
		vocation = vocation.value

	user = await User.get_or_none(user_id=user_id).prefetch_related("subscriptions")

	phone_number = data.get('phone_number', None)
	telegram_link = data.get('telegram_link', None)

	communication_text = phone_number if phone_number else telegram_link

	full_data = f"""–ó–∞–∫–ª–∞–¥ <i>{data['name']}</i>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üìç –ú—ñ—Å—Ç–æ: {data["city"].value}
üè† –†–∞–π–æ–Ω: {data['district']}
‚ôü {vocation}
‚è±Ô∏è –ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏: {data['work_schedule']}
üí∞ –ó–∞—Ä–æ–±—ñ—Ç–Ω–∞ –ø–ª–∞—Ç–∞: {int(data['salary'])} | –°—Ç–∞–≤–∫–∞: {data['rate']}
üìÜ –í–∏–¥–∞—î—Ç—å—Å—è –∑/–ø: {data['issuance_salary']}
üë®‚Äçü¶≥ –í—ñ–∫: –¥–æ {data['age_group']}
üí° –î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏: {data['experience'].value}
üìû –î–ª—è –∑–≤'—è–∑–∫—É: {communication_text} | {full_name}
üì© –°–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É: {data['communication_data'].value}"""

	reset_keyboard_inline = reset_keyboard(role=UserRoleEnum.EMPLOYER).inline_keyboard

	subscriptions: list[PriceOptionEnum] = [sub.status for sub in user.subscriptions] # type: ignore

	is_vip = PriceOptionEnum.VIP in subscriptions

	if is_vip and user.on_week <= 0:
		is_vip = False

	vocation_final_reset = vocation_keyboard_price(balance=user.balance, vip=is_vip).inline_keyboard + reset_keyboard_inline

	vocation_final_reset_markup = InlineKeyboardMarkup(inline_keyboard=vocation_final_reset)

	if not photo:
		await message.answer(full_data, reply_markup=vocation_final_reset_markup, disable_web_page_preview=True)
	else:
		await message.answer_photo(photo.file_id, full_data, reply_markup=vocation_final_reset_markup)

	await state.update_data(photo_id=photo.file_id if photo else None)
	await push_state(state, VocationState.final_state)

@router_employer.callback_query(VocationState.final_state, FinalDataVocation.filter())
async def vocation_final_state(callback: CallbackQuery, callback_data: FinalDataVocation, state: FSMContext):
	data = await state.get_data()

	if not data:
		return await callback.answer("üî¥ –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
	
	user = await User.get_or_none(user_id=callback.from_user.id).prefetch_related("subscriptions")

	message = cast(Message, callback.message)

	if not user:
		await callback.answer()
		return await message.answer("üî¥ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

	subscriptions: list[PriceOptionEnum] = [sub.status for sub in user.subscriptions] # type: ignore

	is_vip = PriceOptionEnum.VIP in subscriptions and callback_data.price_option == PriceOptionEnum.VIP

	resume_sub_in_subscriptions = PriceOptionEnum.RESUME_SUB in subscriptions

	if is_vip:
		if user.on_week > 0:
			user.on_week -= 1
		else:
			await callback.answer()
			return await message.answer("üî¥ –ó –≤–∞—à–∏–º —Ç–∞—Ä–∏—Ñ–æ–º, —Ü–µ –∑—Ä–æ–±–∏—Ç–∏ –Ω–µ–º–æ–∂–ª–∏–≤–æ")
	elif callback_data.price_option == PriceOptionEnum.RESUME_SUB:
		if resume_sub_in_subscriptions:
			data['resume_sub'] = True
		else:
			await callback.answer()
			return await message.answer("üî¥ –ó –≤–∞—à–∏–º —Ç–∞—Ä–∏—Ñ–æ–º, —Ü–µ –∑—Ä–æ–±–∏—Ç–∏ –Ω–µ–º–æ–∂–ª–∏–≤–æ")
	else:
		if user.balance <  callback_data.price:
			await callback.answer()
			return await message.answer("üî¥ –ù–∞ –≤–∞—à–æ–º—É –±–∞–ª–∞–Ω—Å—ñ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó")
		user.balance -= int(callback_data.price)

	await state.clear()

	delta = timedelta()

	if callback_data.price_option in [PriceOptionEnum.VIP, PriceOptionEnum.ONE_WEEK]:
		delta = timedelta(weeks=1) 
	if callback_data.price_option == PriceOptionEnum.ONE_DAY:
		delta = timedelta(days=1) 
	if callback_data.price_option == PriceOptionEnum.RESUME_SUB:
		delta = timedelta(weeks=4)
	

	new_vocation = Vacancies(
		city=data['city'],
		district=data['district'],
		address = data['address'],
		name=data['name'],
		work_schedule=data['work_schedule'],
		issuance_salary=data['issuance_salary'],
		vocation=data['vocation'],
		subvocation=data.get('subvocation', None),
		age_group=data['age_group'],
		experience=data['experience'],
		salary=int(data['salary']),
		rate=data['rate'],
		rate_type=data['rate_type'],
		phone_number=data.get('phone_number', None),
		telegram_link=data.get('telegram_link', None),
		photo_id=data['photo_id'],
		communications=data['communication_data'],
		user=user,
		published=callback_data.published,
		resume_sub=data.get('resume_sub', False),
		time_expired=datetime.now() + delta
	)	

	user.last_vacancy_name = data['name']	

	await new_vocation.save()
	await user.save()

	await callback.answer()
	await message.reply(f"üü¢ –í–∞–∫–∞–Ω—Å—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞!")